package Year2014;

public class February2014a85 {
	public static void main(String[] args)
	{
		int [][] a = 	{{3,8,7,1},
						{5,15,2,4},
						{12,14,-13,22},
						{13,16,17,52}};

//		printPath(a);
		int [] b = {65,70,-5,3,48,49,52};
		System.out.println(findMax(b));
	}
	
	public static void printPath (int[][] mat) {
		printPath(mat,0,0,mat[0][0],mat[0][0],"");
	}
	
	private static void printPath (int[][] mat,int i,int j,int foundMax,int currentNum,String str) {
		if(i < 0 || j < 0 || i >= mat.length || j >= mat[0].length)
			return;
		if(i == mat.length-1 && j == mat[0].length-1) {
			int finish = 0;
			int finish2 = 0;
			if(j <= mat[0].length) {
				int a = Math.max(foundMax,mat[i][j]);
				int b = Math.max(foundMax,mat[i][j-1]);
				finish = Math.max(a, b);
				str += "(" + i + "," + j + ")" ;
			}
			if(i <= mat.length) {
				int c = Math.max(foundMax,mat[i][j]);
				int d = Math.max(foundMax,mat[i-1][j]);
				finish2 = Math.max(c, d);
				str += "(" + i + "," + j + ")" ;
			}
			int finish3 = Math.max(finish2, finish);
			if(finish3 > foundMax) {
				System.out.println(str + "" + finish3);
			}else {
				System.out.println(str + "" + foundMax);
			}
		}
		if(currentNum <= mat[i][j]) {
			printPath(mat,i+1,j,mat[i][j],mat[i][j],str + "(" + i + "," + j + ")");
			printPath(mat,i,j+1,mat[i][j],mat[i][j],str + "(" + i + "," + j + ")");
			printPath(mat,i-1,j,mat[i][j],mat[i][j],str + "(" + i + "," + j + ")");
			printPath(mat,i,j-1,mat[i][j],mat[i][j],str + "(" + i + "," + j + ")");
		}else {
			currentNum = foundMax;
		}		
	}
	
    public static int findMax(int[] arr) {
        int low = 0;
        int high = arr.length-1;
        int mid;
        while(low <= high) {
            if(low == high)
                return low;
            mid = (low+high)/2;
            if(mid < high && arr[mid] > arr[mid + 1])
                return mid;
            if(mid > low && arr[mid] < arr[mid - 1])
                return mid-1;
            if(arr[mid] < arr[low])
                high = mid-1;
            else
                low = mid+1;
        }
        return 0;
    }
	
	
}
