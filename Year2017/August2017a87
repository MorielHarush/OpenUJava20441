package Year2017;

public class August2017a87 {
	
	public static void main(String[] args)
	{
		int [] a = {1,3,4,5,6};
//		int [] b = {4,5,6,10,12};
		System.out.println(isPythagorean(a));
//		System.out.println(isPythagorean(b));
	}
	
	
	/**copy , allZero, xZero is built in the test. 
	 * We will go over each row in the matrix and split into 2 cases.
	   Take it or not take it.
	   If we take it we will subtract the common numbers for the row and array until we get that the array is empty or full at the end of the process.
	 * @param mat - the matrix.
	 * @param arr - the array
	 * @param k - the amount of rows we can use to find all the values in the arr from the mat.
	 * @return
	 */
	public static boolean covers (int [] [] mat, int [] arr, int k)
	{
		int [] arr2 = new int [arr.length];
		copy (arr2,arr); // copying the values from the original array 
		return covers (mat,arr2,k,0);
	}
	
	private static boolean covers (int [] [] mat, int [] arr, int k, int row)
	{
		if (allZero(arr))
			return true; // all the values has been found so its true.
		
		if (k == 0 || row == mat.length)
			return false; // if we used the maximum of rows or got out of the array and we didnt find all the values return false.
		
		boolean notUsed = covers(mat,arr,k,row+1); // what happens if we wont use the current row.
		
		int [] currRow = new int [mat[row].length]; 
		copy (currRow,mat[row]);  // copy the current row
		xZero(arr,currRow); // delete the values were already found in the current row.
		boolean used = covers(mat,arr,k-1,row+1); // what happens if we use the current row.
		return used || notUsed; // return what happend if we will use the row or will not use the row.
	}
	

	/**
	 * Selected c, running on the array from end to beginning.
		Therefore a, b are necessarily smaller than it.
		If a ^ 2 + b ^ 2 are equal to c ^ 2, we get a truth.
		If a ^ 2 + b ^ 2 is less than c ^ 2, e a will move one step to the right.
		If a ^ 2 + b ^ 2 is greater than c ^ 2, the b will advance one step to the left.
		If no solution is found for the array, the answer will return False.
	 * @param arr - the array
	 * @return true or false 
	 */
	public static boolean isPythagorean (int [] arr)
	{
		for(int c=arr.length-1; c > 1; c--) // no need to run more than 2 places.
		{
			int a = 0; // the index of a 
			int b = c-1; // the index of b
			while (b > a) // b is bigger than a 
			{
				int aPow = arr[a] * arr[a]; // Pow on a 
				int bPow = arr[b] * arr[b]; // Pow on b
				int cPow = arr[c] * arr[c]; // Pow on c
				int sum = aPow + bPow; // sum = a^2 + b^2 
				if (sum == cPow) // if there is a^2 + b^2 = c^2 it is true.
					return true;
				if (sum < cPow) // if a^2 + b^2 < c^2 , go 1 step right.
					a++;
				else // if a^2 + b^2 > c^2 , go 1 step left.
					b--;
			} // close of while
		} // close of for 
		return false;
	} // close of main 
}
