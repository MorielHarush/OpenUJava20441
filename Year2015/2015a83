package Year2015;

public class a2015a83 {

	public static void main(String[] args)
	{
		int [][] aa = {{3,13,15,28,30},
						{40,51,52,29,30},
						{28,10,53,54,53},
						{53,12,55,53,60},
						{70,62,56,20,80},
						{80,81,90,95,100}
						};
		System.out.println(shortestPath(aa));

		}
	
	
	public static int shortestPath(int[][] mat)
	{
		return shortestPath(mat,0,0,0);
	}
	
	private static int shortestPath(int [][]mat, int i, int j, int sum)
	{
		if (i < 0 || i >= mat.length || j < 0 || j >= mat[0].length || mat[i][j] < 0) // exception matrix 
			return 0;
		
		if (i == mat.length-1 && j == mat[0].length-1) // finished the road
		{
			return sum+1;
		}
		
		int k = mat [i][j]; // who is k ? 
		mat[i][j] = -k; // so we wont get to this place again

		int options = 	shortestPath(mat,i+1,j,sum+1)+
						shortestPath(mat,i,j+1,sum+1)+
						shortestPath(mat,i-1,j,sum+1)+
						shortestPath(mat,i,j-1,sum+1);
		
		int way1 = shortestPath(mat,i+1,j,sum+k) + shortestPath(mat,i,j+1,sum+k);
		int way2 = shortestPath(mat,i-1,j,sum+k)+ shortestPath(mat,i,j-1,sum+k);
		mat [i][j] = k; // flip it back to k
//		System.out.println(sum);
		return Math.min(way1,way2);
	}
}
